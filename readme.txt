/* readme.txt */

==========================================
(α) ΣΤΟΙΧΕΙΑ ΦΟΙΤΗΤΩΝ
==========================================

ΚΩΝΣΤΑΝΤΙΝΟΣ ΤΣΙΚΟΥΡΗΣ | ΑΜ : 1115201800201
ΒΑΣΙΛΕΙΟΣ ΒΑΣΙΛΑΚΗΣ    | ΑΜ : 1115201800018

==========================================
(β) ΤΙΤΛΟΣ ΚΑΙ ΠΕΡΙΓΡΑΦΗ ΠΡΟΓΡΑΜΜΑΤΟΣ
==========================================

ΕΥΡΕΣΗ ΠΛΗΣΙΕΣΤΕΡΩΝ ΓΕΙΤΟΝΩΝ ΚΑΙ ΣΥΣΤΑΔΟΠΟΙΗΣΗ ΠΟΛΥΔΙΑΣΤΑΤΩΝ ΔΕΔΟΜΕΝΩΝ

Το παρόν πρόγραμμα υλοποιεί αλγορίθμους εύρεσης πλησιέστερων γειτόνων τόσο προσεγγιστικούς (LSH, Hypercube, Range Search) όσο και ωμής βίας.
Επίσης υλοποίουνται αλγόριθμοι συσταδοποίησης, με βάση τον αλγόριθμο του Lloyd's, οι οποίοι βελτιώνουν τον βασικό αλγόριθμο ως προς
την αρχικοποίηση των κεντροειδών (kmeans++ initialization) και ως προς το βήμα της ανάθεσης (reverse assignment με χρήση LSH, Hypercube).
Τέλος υλοποιείται και μια μετρική για την αξιολόγηση της συσταδοποίησης (Silhouette).

==========================================
(γ) ΚΑΤΑΛΟΓΟΣ ΚΑΙ ΠΕΡΙΓΡΑΦΗ ΑΡΧΕΙΩΝ
==========================================

- Στο params.hpp, δηλώνονται μερικές global παράμετροι των αλγορίθμων, για ευκολία.

- Τα input_check.cpp/.hpp περιέχουν συναρτήσεις που τσεκάρουν τα arguments από το command line και αρχικοποιούν τις παραμέτρους
του κάθε αλγορίθμου, και συναρτήσεις που διαβάζουν τα αρχεία δεδομένων (input/query file, config file) .

- Τα object.cpp/.hpp περιέχουν την κλάση που ορίζει, περιγράφει και αναπαριστά ένα d-διάστατο αντικείμενο-σημείο.
Επίσης ορίζονται βοηθητικές συναρτήσεις για τη διαχείριση αντικειμένων της κλάσης.

- Τα dataset.cpp/.hpp περιέχουν την κλάση που ορίζει και περιγράφει τη δομή που αποθηκεύει τη πληροφορία (ουσιαστικά δείκτες σε αντικείμενα-σημεία)
ενός αρχείου δεδομένων αντικειμένων-σημείων. Επίσης ορίζονται βοηθητικές συναρτήσεις για τη διαχείριση αντικειμένων της κλάσης.

- Τα h_hash.cpp/.hpp περιέχουν την κλάση που ορίζει και περιγράφει γενικά το H family συναρτήσεων (τις συναρτήσεις h των διαφανειών) .

- Τα g_hash.cpp/.hpp περιέχουν την κλάση που ορίζει και περιγράφει τις amplified συναρτήσεις κατακερματισμού g.

- Τα hash.cpp/.hpp περιέχουν την κλάση που ορίζει και περιγράφει τη δομή ενός απλού πίνακα κατακερματισμού (hash-table),
ως πίνακα από συνδεδεμένες λίστες.

- Τα lsh_struct.cpp/.hpp περιέχουν την δομή που χρησιμοποιείται για το LSH (τα L hash-tables), καθώς και συναρτήσεις δημιουργίας/αρχικοποίσης/χειρισμού
της δομής.  Επίσης εδώ ορίζονται και υλοποιούνται οι προσεγγιστικοί αλγόριθμοι εύρεσης πλησιέστερων γειτόνων με χρήση LSH (appr_nearest_neighbors, range_search).

- To lsh.cpp, περιέχει τη main συνάρτηση για το LSH που υλοποιεί τη ζητούμενη λειτουργικότητα.

- Τα cluster_info.cpp/.hpp περιέχουν την κλάση που χρησιμοποιείται για να κρατήσει πληροφορία για την συσταδοποίηση (τα κεντροειδή και τα clusters).
Επίσης εδώ ορίζονται και υλοποιούνται όλες οι συναρτήσεις για την υλοποιήση των αλγορίθμων συσταδοποίησης (kmeans++ initialization, exact lloyd's, 
reverse assignment using LSH or Hypercube range search, update των κεντροειδών, μετρική Silhouette).

- To cluster.cpp, περιέχει τη main συνάρτηση για το clustering που υλοποιεί τη ζητούμενη λειτουργικότητα.

- Τα f_hash.cpp/hpp περιέχουν την κλάση των συναρτήσεων f_hash που αναθέτουν ακεραίους με τυχαίο τρόπο στο σύνολο {0,1}.

- Τα hypercube_class.cpp/hpp περιέχουν την κλάση hypercube που δημιουργεί τον d'-διάστατο υπερκύβο, αποθηκεύει τα αντικείμενα-σημεία με τον τρόπο που έχουν περιεγραφεί οι διαφάνειες, καθώς και απαραίτητες μέθοδοι kNN, range search και η έκδοση της ωμής βίας επίλυσης του kNN για τον υπερκύβο και έχει την μέθοδο execute που εκτελεί τα απαιτούμενα της εργασίας και εκτυπώνει τα κατάλληλα αποτελέσματα.

- Το cube.cpp περιέχει τον ίδιο κώδικα με το lsh.cpp απλά τώρα η δομή δεν είναι ένα lsh_struct αλλά ένα hypercube 

=======================================
(δ) ΟΔΗΓΙΕΣ ΜΕΤΑΓΛΩΤΤΙΣΗΣ
=======================================

Για τη δημιουργία του εκτελέσιμου στο LSH :

make lsh
./lsh -i <input_file> -q <query_file> -k <int> -L <int> -o <output_file> -N <int> -R <int>
όπου οι παράμετροι είναι όπως ορίζονται στην εκφώνηση.

Για τη δημιουργία του εκτελέσιμου στο Clustering :

make cluster
./cluster -i <input_file> -c <config_file> -o <output_file> -complete (optional) -m <method>
όπου οι παράμετροι είναι όπως ορίζονται στην εκφώνηση.

make cube
./cube -i <input_file> -q <query_file> -k <int> -M <int> -probes <int> -o <output_file> -N <int> -R <int>

============================================================================
(ε) ΟΔΗΓΙΕΣ ΧΡΗΣΗΣ / ΣΧΕΔΙΑΣΤΙΚΕΣ ΕΠΙΛΟΓΕΣ-ΠΑΡΑΔΟΧΕΣ / ΕΠΙΛΟΓΕΣ ΠΑΡΑΜΕΤΡΩΝ 
============================================================================

Στην υλοποίηση του αλγορίθμου range search στο lsh και στο hypercube υπάρχει μια επιπλέον παράπμετρος R2 που στα hpp αρχεία αρχικοποιείται στο 0 αν ο χρήστης δεν δώσει αυτό το όρισμα. Με αυτή την επιπλέον παράμετρο το range search δεν επιστρέφει όλα τα σημεία που βρίσκει που έχουν απόσταση dist από το query object με 
dist < R αλλά επιστρέφει όλα τα σημεία των οποίων οι απόσταση dist οκανοποιεί τη σχέση R2 <= dist < R. Έτσι, αφού η προκαθορισμένη τιμή του R2 είναι το 0, η συνάρτηση range search τότε απλά θα υπολογίζει τομ κανονικό range search με ακτίνα R  οπότε ηαυτή η γενίκευση του range search δεν επιρρεάζει το κώδικα του πρώτου ερωτήματος καθόλου. Ο λόγος που εισάγεται αυτή τη παράμετρος είναι επειδή στο reverse assignment δεν είναι επιθυμητό να ελέγχονται ξανά σημεία που έχουν ήδη υπολογιστεί σε προηγούμενη επανάληψη με ακτίνα R1 η μικρότερη. Έτσι, θέτοντας R2 = R1, δεν μπαίνουν στο set αυτά τα σημεία ξανά, βελτιώνοντας τον χρόνο στο reverse assignment


Επίσης, για το reverse assignment χρησιμοποιέται η δομή map η οποία αποθηκεύει τα αντικείμενα-σημεία μέσω του id τους μαζί με την απόσταση και το κεντροειδές που έχει τη μικρότερη απόσταση από αυτό. Όταν εκτελείται ένα range search για ένα κεντροειδές, θα επιστραφεί μια λίστα. Για κάθε σημείο-αντικείμενο της λίστας, κοιτάμε μέσω του id αν υπάρχει στο map η όχι. Αν δεν υπάρχει τότε αυτό σημαίνει ότι το σημείο αυτό βρέθηκε για πρώτη φορά άρα το κεντροειδές για το οποίο έτρεξε η range search είναι για εκείνη τη στιγμή το κοντινότερο. Διαφορετικά είναι ήδη στο map άρα απλα κοιτάμε να δούμε για το σημείο αυτό ποιο ήταν το κοντινότερο κεντροειδές και συγκρίνουμε αποστάσεις με το τωρινό κεντροειδές και ενημερώνουμε κατάλληλα τη τιμή του map


Στο makefile, πέρα από τη μεταγλώττιση των αρχείων υπάρχει και η εντολή make mv_objs όπου μεταφέρει όλα τα αντικειμενικά αρχεία σε ένα φάκελο objects. υπάρχουν και εντολές make για εκτελέσεις των εκτελέσιμων ανάλογο με το μέγεθος input, query και μεθόδου ανάλογα με το αν είναι το lsh, το hypercube η το cluster και με τις προκαθορισμένες παραμέτρους. Για το τελευταίο υπάρχει και ένα bash script το οποίο κάνει την ίδια δουλειά αλλά τώρα ο χρήστης μπορεί να προκαθορίσει και το ποιες θα είναι οι παράμετροι ανάλογα με το εκτελέσιμο. 
